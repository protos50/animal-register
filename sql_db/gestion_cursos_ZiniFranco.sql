/* se quiere conocer cuales son los cursos más solicitados y su relación con el cupo máximo de
estudiantes previstos para cada uno. También conocer el comportamiento de los
estudiantes, en cuanto a conocer si realizan más de un taller. Por otro lado, se desea tener
un listado controlado de los intereses (temas de interés de aprendizaje) que pueden
seleccionar los estudiantes (Bases de Datos, Analista funcional, Programación Python, etc).
Es importante saber aquellos cursos que todavía no tienen inscriptos, y los estudiantes que
no se han asignado a ningún taller al momento.
*/
-- cursos, estudiantes, estudiantes-curso, carrera, carrera-estudiante, interes,  estudainte-interese), 


-- curso [id curso, curso_name, tema, descripcion]
CREATE TABLE COURSE (
	ID_COURSE SERIAL,
	ID_TOPIC INTEGER NOT NULL,
	COURSE_NAME TEXT NOT NULL,
	DESCRIPTION TEXT NULL,
	CONSTRAINT PK_COURSE PRIMARY KEY (ID_COURSE),
	CONSTRAINT FK_COURSE_TOPIC FOREIGN KEY (ID_TOPIC) REFERENCES TOPIC (ID_TOPIC)
);

-- convocatoria [id_convocatoria, id_curso, cupo_max {validate}, fecha incicio (date), fecha fin (date), descripcion]
CREATE TABLE OFFERING (
	ID_OFFERING SERIAL,
	ID_COURSE INTEGER NOT NULL,
	CAPACITY SMALLINT NOT NULL,
	START_DATE DATE NOT NULL,
	END_DATE DATE NOT NULL,
	DESCRIPTION TEXT NULL,
	CONSTRAINT PK_OFFERING PRIMARY KEY (ID_OFFERING),
	CONSTRAINT FK_OFFERING_COURSE FOREIGN KEY (ID_COURSE) REFERENCES COURSE (ID_COURSE),
	CONSTRAINT CHECK_END_DATE CHECK (END_DATE > START_DATE)
);

-- student [id estudiante, name, lastname, born (date) {validate}, dni (unique)]
CREATE TABLE STUDENT (
	ID_STUDENT SERIAL,
	STUDENT_NAME TEXT NOT NULL,
	STUDENT_LASTNAE TEXT NOT NULL,
	DNI VARCHAR(8) NOT NULL,
	BIRTHDATE DATE NOT NULL,
	CONSTRAINT PK_STUDENT PRIMARY KEY (ID_STUDENT),
	CONSTRAINT UNIQUE_DNI UNIQUE (DNI),
	CONSTRAINT CHECK_DNI CHECK (
		LENGTH(DNI) = 8
		AND REGEXP_REPLACE(DNI, '^[0]*[1-9][0-9]*$', '') = ''
	),
	CONSTRAINT CHECK_AGE CHECK (
		AGE (BIRTHDATE) >= INTERVAL '12 years'
		AND AGE (BIRTHDATE) < INTERVAL '100 years'
	)
);


-- topic [id topic, topic_name]
CREATE TABLE TOPIC (
	ID_TOPIC SERIAL,
	TOPIC_NAME TEXT NOT NULL,
	CONSTRAINT PK_TOPIC PRIMARY KEY (ID_TOPIC)
);

-- email [id email, email]
CREATE TABLE EMAIL (
	ID_EMAIL SERIAL,
	EMAIL TEXT NOT NULL,
	VERIFIED BOOLEAN NOT NULL,
	CONSTRAINT PK_EMAIL PRIMARY KEY (ID_EMAIL)
);


-- perfil_tecnico [id perfil_tecnico, perfil_tecnico_name]
CREATE TABLE TECHNICAL_SKILL (
	ID_TECHNICAL_SKILL SERIAL,
	TECHNICAL_SKILL TEXT NOT NULL,
	CONSTRAINT PK_TECHNICAL_SKILL PRIMARY KEY (ID_TECHNICAL_SKILL)
);


-- student-email [id student, id mail, verified (bool)]
CREATE TABLE STUDENT_EMAIL (
	ID_STUDENT INTEGER NOT NULL,
	ID_EMAIL INTEGER NOT NULL,
	CONSTRAINT PK_STUDENT_EMAIL PRIMARY KEY (ID_STUDENT, ID_EMAIL),
	CONSTRAINT FK_STUDENT_STUDENTEMAIL FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT (ID_STUDENT),
	CONSTRAINT FK_EMAIL_STUDENTEMAIL FOREIGN KEY (ID_EMAIL) REFERENCES EMAIL (ID_EMAIL)
);

-- estudiante_perfil-tecnico [id estudiante, id perfil tecnico]
CREATE TABLE STUDENT_TECHNICALSKILL (
	ID_STUDENT INTEGER NOT NULL,
	ID_TECHNICAL_SKILL INTEGER NOT NULL,
	CONSTRAINT PK_STUDENT_TECHNICALSKILL PRIMARY KEY (ID_STUDENT, ID_TECHNICAL_SKILL),
	CONSTRAINT FK_STUDENT_STUDENT_TECHNICALSKILL FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT (ID_STUDENT),
	CONSTRAINT FK_TECHNICALSKILL_STUDENTEMAIL FOREIGN KEY (ID_TECHNICAL_SKILL) REFERENCES TECHNICAL_SKILL (ID_TECHNICAL_SKILL)
);

-- estudiante-convocatoria [id curso, id estudainte] {validate so that the number of student does not take over the max number}
CREATE TABLE STUDENT_OFFERING (
	ID_STUDENT INTEGER NOT NULL,
	ID_OFFERING INTEGER NOT NULL,
	CONSTRAINT PK_STUDENT_OFFERING PRIMARY KEY (ID_STUDENT, ID_OFFERING),
	CONSTRAINT FK_STUDENT_STUDENTOFFERING FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT (ID_STUDENT),
	CONSTRAINT FK_OFFERING_STUDENTOFFERING FOREIGN KEY (ID_OFFERING) REFERENCES OFFERING (ID_OFFERING)
);

-- interest [id topic, id student]
CREATE TABLE INTEREST (
	ID_STUDENT INTEGER NOT NULL,
	ID_TOPIC INTEGER NOT NULL,
	CONSTRAINT PK_INTEREST PRIMARY KEY (ID_STUDENT, ID_TOPIC),
	CONSTRAINT FK_STUDENT_INTEREST FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT (ID_STUDENT),
	CONSTRAINT FK_TOPIC_INTEREST FOREIGN KEY (ID_TOPIC) REFERENCES TOPIC (ID_TOPIC)
);

